`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 19.04.2022 07:39:57
// Design Name: 
// Module Name: IRDECODER
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module IRDECODER(
    input wire INT,
    input wire [7:0] OPCODE,
    output reg [7:0] IRJUMP,
    output reg IRREF,
    output reg SELJUMP,
    output reg [3:0] aluopsel,
    output reg [1:0] pcopsel,
    output reg [3:0] seldst,
    output reg [3:0] selsrc,
    output reg [2:0] state,
    output reg [7:0] IR,
    output reg dstoe,
    output reg srcoe,
    input wire clk,
    input wire rst
    );

reg statex;


initial
begin
state=3'h0;
IR=1'h0;
dstoe=1'b1;
srcoe=1'b1;
seldst=4'h0; 
selsrc=4'h0; 
aluopsel=4'h0; 
pcopsel=2'h0;
IRREF=1'b0;  // Stack Refresh
SELJUMP=1'b0; //MAR Selected
IRJUMP=8'd33; // Jump vector For Interrupt
statex=1'b0;
end

    
always@(posedge clk)
begin
    if(!rst) begin
             state=3'h0;
             state=3'h0;
             IR=1'h0;
             dstoe=1'b1;
             srcoe=1'b1;
             seldst=4'h0; 
             selsrc=4'h0; 
             aluopsel=4'h0; 
             pcopsel=2'h0;
             statex=1'b0;
             IRREF=1'b0;  // Stack Refresh
             SELJUMP=1'b0; //MAR Selected
             IRJUMP=8'd33; // Jump vector For Interrupt
             end 
    if(rst) begin
                 if(INT==1'b1 & state==3'h0)
                    begin
                    statex=1'b1;
                    end
                 if(statex)
                 begin
                 case(state)
                 3'h0: begin
                       IRJUMP=8'd33; // Jump vector For Interrupt
                       IRREF=1'b1;  // Stack Obtain data
                       SELJUMP=1'b1; //IRJMP Selected
                       state=state+1;
                       end
                 3'h1: begin
                       IRREF=1'b0;  // Stack Refresh
                       SELJUMP=1'b1; //IRJUMP Selected
                       pcopsel=2'h2; // Load data from IRJMP to PC
                       state=state+1;
                       end
                 3'h2: begin
                       SELJUMP=1'b0; //IRJUMP Selected
                       pcopsel=2'h0; // PC Refresh
                       state=3'h0;  // Reset State
                       statex=1'b0; // Ends ISR Vector
                       end                       
                endcase
                end
                if(!statex)
                begin
                    dstoe=1'b1;
                    srcoe=1'b1;
                    case(state)
                    3'h0: begin
                          IR=OPCODE; // FETCH
                          state=state+1;
                          end
                    3'h1: begin
                          case(IR)   //DECODE PH1
                          8'h00: begin
                                 seldst=4'h1; 
                                 selsrc=4'h1; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; //NOP
                                 end
                          8'h01: begin
                                 seldst=4'h1; 
                                 selsrc=4'h3; 
                                 aluopsel=4'h0;   // Load Value
                                 pcopsel=2'h0; // PC
                                 end 
                          8'h02: begin
                                 seldst=4'h2; 
                                 selsrc=4'h3;  
                                 aluopsel=4'h0; // LOAD Value
                                 pcopsel=2'h0; // 
                                 end 
                          8'h03: begin
                                 seldst=4'h4; 
                                 selsrc=4'h1; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; // OUTA
                                 end  
                          8'h04: begin
                                 seldst=4'h4; 
                                 selsrc=4'h2; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; //OUTB
                                 end 
                          8'h06: begin
                                 seldst=4'h1; 
                                 selsrc=4'h1; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; 
                                 end
                          8'h07: begin
                                 seldst=4'h1; 
                                 selsrc=4'h4; 
                                 aluopsel=4'h1; 
                                 pcopsel=2'h0; // ADDAB
                                 end
           //               8'h08: // SUBAB
           //               8'h09: // ANDAB
           //               8'h10: // ORLAB
           //               8'h11: // NOTA
           //               8'h12: // XORAB
                          endcase
                            state=state+8'h01;
                          end
                     3'h2: begin
                            state=state+8'h01;
                           end
                     3'h3: begin
                          case(IR) // EXECUTE PH2
                          8'h00: begin
                                 seldst=4'h1; 
                                 selsrc=4'h1; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; //NOP
                                end
                          8'h01: begin
                                 seldst=4'h1; 
                                 selsrc=4'h3; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; // A<-INR
                                 end
                          8'h02: begin
                                 seldst=4'h2; 
                                 selsrc=4'h3; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; // B<-INR
                                 end
                          8'h03: begin
                                 seldst=4'h4; 
                                 selsrc=4'h1; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; // OUTA
                                 end  
                          8'h04: begin
                                 seldst=4'h4; 
                                 selsrc=4'h2; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; //OUTB
                                 end 
                          8'h06: begin
                                 seldst=4'h5; 
                                 selsrc=4'h5; 
                                 aluopsel=4'h0; 
                                 pcopsel=2'h0; // MAR<-MBR
                                 end
                          8'h07: begin
                                 seldst=4'h1;
                                 selsrc=4'h4; 
                                 aluopsel=4'h0;  // previously 1
                                 pcopsel=2'h0; // ADDAB
                                 end
                      //    8'h08: // SUBAB
                       //   8'h09: // ANDAB
                       //   8'h10: // ORLAB
                       //   8'h11: // NOTA
                       //   8'h12: // XORAB
                          endcase
                          state=state+8'h01;
                          end     
                     3'h4: begin
                                 pcopsel=2'h1;
                                 state=state+8'h01;
                                end
                     3'h5: begin
                            if(IR==8'h06) begin 
                                         pcopsel=2'h2;
                                         end// PC<-MAR
     //                       aluopsel=4'h0;                         
                            pcopsel=2'h0;
                            state=8'h0;
                            end
                     //3'h6:  begin
                    //         pcopsel=2'h1; 
                    //         state=8'h0;
                    //       end
                     default: begin
                              seldst=4'h1;
                              selsrc=4'h1; 
                              aluopsel=4'h0; 
                              pcopsel=2'h0;
                              end
                     endcase
                 end
             end
             
end

endmodule
